//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace FutbolMerkeziWebServis.FutbolMerkeziServis {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FM_Web_ServiceSoap", Namespace="http://tempuri.org/")]
    public partial class FM_Web_Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetStandingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMatchesListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTopScorersOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public FM_Web_Service() {
            this.Url = global::FutbolMerkeziWebServis.Properties.Settings.Default.FutbolMerkeziWebServis_FutbolMerkeziServis_FM_Web_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetStandingsCompletedEventHandler GetStandingsCompleted;
        
        /// <remarks/>
        public event GetMatchesListCompletedEventHandler GetMatchesListCompleted;
        
        /// <remarks/>
        public event GetTopScorersCompletedEventHandler GetTopScorersCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStandings", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetStandings(MatchType MatchType) {
            object[] results = this.Invoke("GetStandings", new object[] {
                        MatchType});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetStandingsAsync(MatchType MatchType) {
            this.GetStandingsAsync(MatchType, null);
        }
        
        /// <remarks/>
        public void GetStandingsAsync(MatchType MatchType, object userState) {
            if ((this.GetStandingsOperationCompleted == null)) {
                this.GetStandingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStandingsOperationCompleted);
            }
            this.InvokeAsync("GetStandings", new object[] {
                        MatchType}, this.GetStandingsOperationCompleted, userState);
        }
        
        private void OnGetStandingsOperationCompleted(object arg) {
            if ((this.GetStandingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStandingsCompleted(this, new GetStandingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMatchesList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetMatchesList(MatchType MatchType) {
            object[] results = this.Invoke("GetMatchesList", new object[] {
                        MatchType});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetMatchesListAsync(MatchType MatchType) {
            this.GetMatchesListAsync(MatchType, null);
        }
        
        /// <remarks/>
        public void GetMatchesListAsync(MatchType MatchType, object userState) {
            if ((this.GetMatchesListOperationCompleted == null)) {
                this.GetMatchesListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMatchesListOperationCompleted);
            }
            this.InvokeAsync("GetMatchesList", new object[] {
                        MatchType}, this.GetMatchesListOperationCompleted, userState);
        }
        
        private void OnGetMatchesListOperationCompleted(object arg) {
            if ((this.GetMatchesListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMatchesListCompleted(this, new GetMatchesListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTopScorers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetTopScorers(MatchType MatchType) {
            object[] results = this.Invoke("GetTopScorers", new object[] {
                        MatchType});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetTopScorersAsync(MatchType MatchType) {
            this.GetTopScorersAsync(MatchType, null);
        }
        
        /// <remarks/>
        public void GetTopScorersAsync(MatchType MatchType, object userState) {
            if ((this.GetTopScorersOperationCompleted == null)) {
                this.GetTopScorersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTopScorersOperationCompleted);
            }
            this.InvokeAsync("GetTopScorers", new object[] {
                        MatchType}, this.GetTopScorersOperationCompleted, userState);
        }
        
        private void OnGetTopScorersOperationCompleted(object arg) {
            if ((this.GetTopScorersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTopScorersCompleted(this, new GetTopScorersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum MatchType {
        
        /// <remarks/>
        AbantKupası,
        
        /// <remarks/>
        AbdullahKaptanKaymaklıCup,
        
        /// <remarks/>
        AfrikaUluslarKupası,
        
        /// <remarks/>
        AkdenizKupası,
        
        /// <remarks/>
        AkdenizKupası1,
        
        /// <remarks/>
        AkdenizKupası2,
        
        /// <remarks/>
        AlmanyaBundesliga,
        
        /// <remarks/>
        AnadoluCup,
        
        /// <remarks/>
        AnatolianCup,
        
        /// <remarks/>
        AntalyaCup,
        
        /// <remarks/>
        AntalyaKupası,
        
        /// <remarks/>
        ArjantinLigi,
        
        /// <remarks/>
        AspendosKupası,
        
        /// <remarks/>
        AvanosCupFutbolTurnuvası,
        
        /// <remarks/>
        AvrupaSüperKupası,
        
        /// <remarks/>
        AvrupaŞampiyonası,
        
        /// <remarks/>
        AvrupaŞampiyonasıElemeleri,
        
        /// <remarks/>
        BankAsya1Lig,
        
        /// <remarks/>
        BankAsya1LigeYükselmeMaçları,
        
        /// <remarks/>
        BarışKupası,
        
        /// <remarks/>
        BasriDirimliliCup,
        
        /// <remarks/>
        BelçikaLigi,
        
        /// <remarks/>
        BilyonerKupası,
        
        /// <remarks/>
        BoluFutbolTurnuvası,
        
        /// <remarks/>
        CopaAmerica,
        
        /// <remarks/>
        CornersporCup,
        
        /// <remarks/>
        ÇanakkaleZaferCup,
        
        /// <remarks/>
        DavrazCupFutbolTurnuvası,
        
        /// <remarks/>
        DoğanEmültayKupası,
        
        /// <remarks/>
        DostlukKupası,
        
        /// <remarks/>
        DünyaKupası,
        
        /// <remarks/>
        DünyaKupasıElemeleri,
        
        /// <remarks/>
        EfesKupası,
        
        /// <remarks/>
        EgeCup,
        
        /// <remarks/>
        EğirdirCupFutbolTurnuvası,
        
        /// <remarks/>
        FethiyeKupası,
        
        /// <remarks/>
        FIFAKonfederasyonKupası,
        
        /// <remarks/>
        FortisTürkiyeKupası,
        
        /// <remarks/>
        FransaLigue1,
        
        /// <remarks/>
        GeredeCupFutbolTurnuvası,
        
        /// <remarks/>
        GökmenYıldıranFutbolTurnuvası,
        
        /// <remarks/>
        GündüzTekinOnayKupası,
        
        /// <remarks/>
        HaliçCup,
        
        /// <remarks/>
        HasanDoğanKapadokyaFutbolTunuvası,
        
        /// <remarks/>
        HasanDoğanKızılcıhamamFutbolTurnuvası,
        
        /// <remarks/>
        HazırlıkMaçı,
        
        /// <remarks/>
        İngilterePremierLigi,
        
        /// <remarks/>
        İspanyaLaLiga,
        
        /// <remarks/>
        İsveçLigi,
        
        /// <remarks/>
        İsviçreLigi,
        
        /// <remarks/>
        İtalyaSerieA,
        
        /// <remarks/>
        İzmirKupası,
        
        /// <remarks/>
        İzmitCup,
        
        /// <remarks/>
        İzzetBaysalCup,
        
        /// <remarks/>
        KadriyeKupası,
        
        /// <remarks/>
        KapadokyaKupası,
        
        /// <remarks/>
        KardeşlikKupası,
        
        /// <remarks/>
        KartepeCup,
        
        /// <remarks/>
        KayaBelekKupası,
        
        /// <remarks/>
        KayaSideKupası,
        
        /// <remarks/>
        KızılcahamamKupası,
        
        /// <remarks/>
        LaraCup,
        
        /// <remarks/>
        MackolikComKupası,
        
        /// <remarks/>
        ManavgatCup,
        
        /// <remarks/>
        MetinOktayCup,
        
        /// <remarks/>
        MuratpaşaCup,
        
        /// <remarks/>
        NevşehirBelediyeBaşkanlığıCup,
        
        /// <remarks/>
        NevşehirKupası,
        
        /// <remarks/>
        ÖzelMaç,
        
        /// <remarks/>
        PatalyaKupası,
        
        /// <remarks/>
        SapancaCup,
        
        /// <remarks/>
        SerikCup,
        
        /// <remarks/>
        SevgiKupası,
        
        /// <remarks/>
        SporxComKupası,
        
        /// <remarks/>
        ŞampiyonlarLigi,
        
        /// <remarks/>
        TFF2Lig1Grup,
        
        /// <remarks/>
        TFF2Lig2Grup,
        
        /// <remarks/>
        TFF2Lig3Grup,
        
        /// <remarks/>
        TFF2Lig4Grup,
        
        /// <remarks/>
        TFF2Lig5Grup,
        
        /// <remarks/>
        TFF2LigYükselmeGrubu,
        
        /// <remarks/>
        TFF2LigeYükselmeMaçları,
        
        /// <remarks/>
        TFF3LigYükselmeGrubu,
        
        /// <remarks/>
        TorosCup,
        
        /// <remarks/>
        TurgutlusporBodrumFutbolTurnuvası,
        
        /// <remarks/>
        TurgutlusporGöremeKupasıFutbolTurnuvası,
        
        /// <remarks/>
        TurkcellSüperLig,
        
        /// <remarks/>
        TurkcellSüperLigeYükselmeMaçları,
        
        /// <remarks/>
        Türkiye2LigYükselmeGrubu,
        
        /// <remarks/>
        Türkiye2ligiYükselmeGrubu,
        
        /// <remarks/>
        Türkiye3Ligi1Grup,
        
        /// <remarks/>
        Türkiye3Ligi2Grup,
        
        /// <remarks/>
        Türkiye3Ligi3Grup,
        
        /// <remarks/>
        Türkiye3Ligi4Grup,
        
        /// <remarks/>
        Türkiye3Ligi5Grup,
        
        /// <remarks/>
        Türkiye3Ligi6Grup,
        
        /// <remarks/>
        Türkiye3Ligi7Grup,
        
        /// <remarks/>
        Türkiye3Ligi8Grup,
        
        /// <remarks/>
        TürkiyeBaşbakanlıkKupası,
        
        /// <remarks/>
        TürkiyeCumhurbaşkanlıkKupası,
        
        /// <remarks/>
        TürkiyeSporYazarlarıDerneğiKupası,
        
        /// <remarks/>
        TürkiyeSüperKupası,
        
        /// <remarks/>
        TürkiyeSüperLigi1959SezonuŞampiyonlukMaçları,
        
        /// <remarks/>
        TürkiyeSüperLigi19621963SezonuFinalGrubu,
        
        /// <remarks/>
        TürkiyeSüperLigiBeyazGrup,
        
        /// <remarks/>
        TürkiyeSüperLigiKırmızıGrup,
        
        /// <remarks/>
        UçhisarKupası,
        
        /// <remarks/>
        UEFAKupası,
        
        /// <remarks/>
        ÜrgüpKupası,
        
        /// <remarks/>
        YozgatFutbolTurnuvası,
        
        /// <remarks/>
        ZinnurSarıCup,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetStandingsCompletedEventHandler(object sender, GetStandingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStandingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStandingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMatchesListCompletedEventHandler(object sender, GetMatchesListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMatchesListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMatchesListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTopScorersCompletedEventHandler(object sender, GetTopScorersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTopScorersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTopScorersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591